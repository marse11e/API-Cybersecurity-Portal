# Generated by Django 5.1.7 on 2025-05-16 02:09

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Название достижения', max_length=100, verbose_name='Название')),
                ('description', models.TextField(help_text='Описание условий получения достижения', verbose_name='Описание')),
                ('icon', models.CharField(help_text='Название иконки для отображения достижения', max_length=50, verbose_name='Иконка')),
            ],
            options={
                'verbose_name': 'Достижение',
                'verbose_name_plural': 'Достижения',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Название категории', max_length=100, verbose_name='Название')),
                ('slug', models.SlugField(help_text='Уникальный идентификатор для URL', unique=True, verbose_name='Слаг')),
                ('count', models.PositiveIntegerField(default=0, help_text='Количество элементов в данной категории', verbose_name='Количество')),
            ],
            options={
                'verbose_name': 'Категория',
                'verbose_name_plural': 'Категории',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Название тега', max_length=50, verbose_name='Название')),
                ('slug', models.SlugField(help_text='Уникальный идентификатор для URL', unique=True, verbose_name='Слаг')),
                ('count', models.PositiveIntegerField(default=0, help_text='Количество элементов с данным тегом', verbose_name='Количество')),
            ],
            options={
                'verbose_name': 'Тег',
                'verbose_name_plural': 'Теги',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('avatar', models.ImageField(blank=True, help_text='Изображение профиля пользователя', null=True, upload_to='avatars/', verbose_name='Аватар')),
                ('bio', models.TextField(blank=True, help_text='Краткая информация о пользователе', verbose_name='Биография')),
                ('role', models.CharField(blank=True, help_text='Роль пользователя в системе (студент, преподаватель и т.д.)', max_length=100, verbose_name='Роль')),
                ('join_date', models.DateField(auto_now_add=True, help_text='Дата создания учетной записи', verbose_name='Дата регистрации')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Заголовок статьи', max_length=255, verbose_name='Заголовок')),
                ('description', models.TextField(help_text='Краткое описание или аннотация статьи', verbose_name='Краткое описание')),
                ('content', models.TextField(help_text='Полный текст статьи', verbose_name='Содержание')),
                ('image', models.URLField(help_text='URL изображения для статьи', verbose_name='Изображение')),
                ('date', models.DateField(help_text='Дата публикации статьи', verbose_name='Дата публикации')),
                ('read_time', models.PositiveIntegerField(default=0, help_text='Примерное время чтения статьи в минутах', verbose_name='Время чтения')),
                ('views', models.PositiveIntegerField(default=0, help_text='Количество просмотров статьи', verbose_name='Просмотры')),
                ('likes', models.PositiveIntegerField(default=0, help_text='Количество лайков статьи', verbose_name='Лайки')),
                ('featured', models.BooleanField(default=False, help_text='Отметка о том, что статья является рекомендованной', verbose_name='Рекомендованная')),
                ('author', models.ForeignKey(help_text='Автор статьи', on_delete=django.db.models.deletion.CASCADE, related_name='articles', to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('category', models.ForeignKey(help_text='Категория, к которой относится статья', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='articles', to='main.category', verbose_name='Категория')),
                ('tags', models.ManyToManyField(help_text='Теги, связанные со статьей', related_name='articles', to='main.tag', verbose_name='Теги')),
            ],
            options={
                'verbose_name': 'Статья',
                'verbose_name_plural': 'Статьи',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_now_add=True, help_text='Дата создания комментария', verbose_name='Дата')),
                ('content', models.TextField(help_text='Текст комментария', verbose_name='Содержание')),
                ('likes', models.PositiveIntegerField(default=0, help_text='Количество лайков комментария', verbose_name='Лайки')),
                ('article', models.ForeignKey(help_text='Статья, к которой относится комментарий', on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='main.article', verbose_name='Статья')),
                ('parent', models.ForeignKey(blank=True, help_text='Комментарий, на который дан ответ', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='main.comment', verbose_name='Родительский комментарий')),
                ('user', models.ForeignKey(help_text='Автор комментария', on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Комментарий',
                'verbose_name_plural': 'Комментарии',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Название курса', max_length=255, verbose_name='Название')),
                ('description', models.TextField(help_text='Краткое описание курса для превью', verbose_name='Краткое описание')),
                ('long_description', models.TextField(blank=True, help_text='Подробное описание курса', verbose_name='Полное описание')),
                ('image', models.URLField(help_text='URL изображения для курса', verbose_name='Изображение')),
                ('level', models.CharField(choices=[('Начальный', 'Начальный'), ('Средний', 'Средний'), ('Продвинутый', 'Продвинутый')], help_text='Уровень сложности курса', max_length=20, verbose_name='Уровень сложности')),
                ('duration', models.CharField(help_text='Общая продолжительность курса', max_length=50, verbose_name='Продолжительность')),
                ('rating', models.DecimalField(decimal_places=1, default=0.0, help_text='Средний рейтинг курса', max_digits=3, verbose_name='Рейтинг')),
                ('students', models.PositiveIntegerField(default=0, help_text='Количество студентов, записанных на курс', verbose_name='Студенты')),
                ('price', models.CharField(blank=True, help_text='Стоимость курса', max_length=20, verbose_name='Цена')),
                ('featured', models.BooleanField(default=False, help_text='Отметка о том, что курс является рекомендованным', verbose_name='Рекомендованный')),
                ('last_updated', models.CharField(help_text='Дата последнего обновления курса', max_length=50, verbose_name='Последнее обновление')),
                ('language', models.CharField(default='Русский', help_text='Язык, на котором ведется курс', max_length=50, verbose_name='Язык')),
                ('certificate', models.BooleanField(default=False, help_text='Выдается ли сертификат по окончании курса', verbose_name='Сертификат')),
                ('prerequisites', models.TextField(blank=True, help_text='Необходимые знания для прохождения курса', verbose_name='Предварительные требования')),
                ('objectives', models.JSONField(default=list, help_text='Список целей обучения в формате JSON', verbose_name='Цели обучения')),
                ('category', models.ForeignKey(help_text='Категория, к которой относится курс', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='courses', to='main.category', verbose_name='Категория')),
                ('instructor', models.ForeignKey(help_text='Преподаватель курса', on_delete=django.db.models.deletion.CASCADE, related_name='courses', to=settings.AUTH_USER_MODEL, verbose_name='Преподаватель')),
                ('tags', models.ManyToManyField(help_text='Теги, связанные с курсом', related_name='courses', to='main.tag', verbose_name='Теги')),
            ],
            options={
                'verbose_name': 'Курс',
                'verbose_name_plural': 'Курсы',
            },
        ),
        migrations.CreateModel(
            name='CourseMaterial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Название материала', max_length=255, verbose_name='Название')),
                ('file', models.FileField(help_text='Загружаемый файл материала', upload_to='course_materials/', verbose_name='Файл')),
                ('type', models.CharField(choices=[('pdf', 'PDF'), ('excel', 'Excel'), ('word', 'Word'), ('other', 'Other')], help_text='Тип файла материала', max_length=10, verbose_name='Тип')),
                ('size', models.CharField(help_text='Размер файла в удобочитаемом формате', max_length=20, verbose_name='Размер')),
                ('course', models.ForeignKey(help_text='Курс, к которому относится материал', on_delete=django.db.models.deletion.CASCADE, related_name='materials', to='main.course', verbose_name='Курс')),
            ],
            options={
                'verbose_name': 'Материал курса',
                'verbose_name_plural': 'Материалы курса',
            },
        ),
        migrations.CreateModel(
            name='CourseSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Название раздела курса', max_length=255, verbose_name='Название')),
                ('order', models.PositiveIntegerField(default=0, help_text='Порядковый номер раздела в курсе', verbose_name='Порядок')),
                ('course', models.ForeignKey(help_text='Курс, к которому относится раздел', on_delete=django.db.models.deletion.CASCADE, related_name='sections', to='main.course', verbose_name='Курс')),
            ],
            options={
                'verbose_name': 'Раздел курса',
                'verbose_name_plural': 'Разделы курса',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Discussion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Заголовок обсуждения', max_length=255, verbose_name='Заголовок')),
                ('description', models.TextField(help_text='Текст обсуждения', verbose_name='Описание')),
                ('date', models.DateTimeField(auto_now_add=True, help_text='Дата и время создания обсуждения', verbose_name='Дата создания')),
                ('replies', models.PositiveIntegerField(default=0, help_text='Количество ответов в обсуждении', verbose_name='Ответы')),
                ('views', models.PositiveIntegerField(default=0, help_text='Количество просмотров обсуждения', verbose_name='Просмотры')),
                ('likes', models.PositiveIntegerField(default=0, help_text='Количество лайков обсуждения', verbose_name='Лайки')),
                ('pinned', models.BooleanField(default=False, help_text='Отметка о том, что обсуждение закреплено', verbose_name='Закрепленное')),
                ('solved', models.BooleanField(default=False, help_text='Отметка о том, что проблема в обсуждении решена', verbose_name='Решено')),
                ('author', models.ForeignKey(help_text='Пользователь, создавший обсуждение', on_delete=django.db.models.deletion.CASCADE, related_name='discussions', to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('category', models.ForeignKey(help_text='Категория, к которой относится обсуждение', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='discussions', to='main.category', verbose_name='Категория')),
                ('tags', models.ManyToManyField(help_text='Теги, связанные с обсуждением', related_name='discussions', to='main.tag', verbose_name='Теги')),
            ],
            options={
                'verbose_name': 'Обсуждение',
                'verbose_name_plural': 'Обсуждения',
                'ordering': ['-pinned', '-date'],
            },
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Название урока', max_length=255, verbose_name='Название')),
                ('duration', models.CharField(help_text='Продолжительность урока', max_length=20, verbose_name='Продолжительность')),
                ('type', models.CharField(choices=[('video', 'Видео'), ('quiz', 'Тест'), ('exercise', 'Упражнение'), ('exam', 'Экзамен'), ('project', 'Проект')], help_text='Тип урока (видео, тест и т.д.)', max_length=20, verbose_name='Тип')),
                ('order', models.PositiveIntegerField(default=0, help_text='Порядковый номер урока в разделе', verbose_name='Порядок')),
                ('section', models.ForeignKey(help_text='Раздел курса, к которому относится урок', on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='main.coursesection', verbose_name='Раздел')),
            ],
            options={
                'verbose_name': 'Урок',
                'verbose_name_plural': 'Уроки',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Reply',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(help_text='Текст ответа', verbose_name='Содержание')),
                ('date', models.DateTimeField(auto_now_add=True, help_text='Дата и время создания ответа', verbose_name='Дата')),
                ('likes', models.PositiveIntegerField(default=0, help_text='Количество лайков ответа', verbose_name='Лайки')),
                ('discussion', models.ForeignKey(help_text='Обсуждение, к которому относится ответ', on_delete=django.db.models.deletion.CASCADE, related_name='discussion_replies', to='main.discussion', verbose_name='Обсуждение')),
                ('user', models.ForeignKey(help_text='Пользователь, оставивший ответ', on_delete=django.db.models.deletion.CASCADE, related_name='discussion_replies', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Ответ',
                'verbose_name_plural': 'Ответы',
                'ordering': ['date'],
            },
        ),
        migrations.CreateModel(
            name='UserActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_type', models.CharField(choices=[('course', 'Курс'), ('test', 'Тест'), ('article', 'Статья'), ('discussion', 'Обсуждение')], help_text='Тип действия пользователя', max_length=20, verbose_name='Тип активности')),
                ('title', models.CharField(help_text='Название элемента, с которым взаимодействовал пользователь', max_length=255, verbose_name='Название')),
                ('date', models.DateTimeField(auto_now_add=True, help_text='Дата и время активности', verbose_name='Дата')),
                ('progress', models.PositiveIntegerField(blank=True, help_text='Процент выполнения (для курсов)', null=True, verbose_name='Прогресс')),
                ('score', models.PositiveIntegerField(blank=True, help_text='Полученная оценка (для тестов)', null=True, verbose_name='Оценка')),
                ('user', models.ForeignKey(help_text='Пользователь, совершивший действие', on_delete=django.db.models.deletion.CASCADE, related_name='activities', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Активность пользователя',
                'verbose_name_plural': 'Активности пользователя',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='CourseReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveIntegerField(help_text='Оценка курса от 1 до 5', verbose_name='Оценка')),
                ('date', models.DateField(auto_now_add=True, help_text='Дата создания отзыва', verbose_name='Дата')),
                ('comment', models.TextField(help_text='Текст отзыва', verbose_name='Комментарий')),
                ('course', models.ForeignKey(help_text='Курс, к которому относится отзыв', on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='main.course', verbose_name='Курс')),
                ('user', models.ForeignKey(help_text='Пользователь, оставивший отзыв', on_delete=django.db.models.deletion.CASCADE, related_name='course_reviews', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Отзыв о курсе',
                'verbose_name_plural': 'Отзывы о курсе',
                'unique_together': {('user', 'course')},
            },
        ),
        migrations.CreateModel(
            name='CourseProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('completed', models.BooleanField(default=False, help_text='Отметка о завершении урока', verbose_name='Завершен')),
                ('date_completed', models.DateTimeField(blank=True, help_text='Дата и время завершения урока', null=True, verbose_name='Дата завершения')),
                ('user', models.ForeignKey(help_text='Пользователь, чей прогресс отслеживается', on_delete=django.db.models.deletion.CASCADE, related_name='course_progresses', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
                ('lesson', models.ForeignKey(help_text='Урок, по которому отслеживается прогресс', on_delete=django.db.models.deletion.CASCADE, to='main.lesson', verbose_name='Урок')),
            ],
            options={
                'verbose_name': 'Прогресс курса',
                'verbose_name_plural': 'Прогресс курсов',
                'unique_together': {('user', 'lesson')},
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_earned', models.DateTimeField(auto_now_add=True, help_text='Дата и время получения достижения', verbose_name='Дата получения')),
                ('achievement', models.ForeignKey(help_text='Полученное достижение', on_delete=django.db.models.deletion.CASCADE, to='main.achievement', verbose_name='Достижение')),
                ('user', models.ForeignKey(help_text='Пользователь, получивший достижение', on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Достижение пользователя',
                'verbose_name_plural': 'Достижения пользователя',
                'unique_together': {('user', 'achievement')},
            },
        ),
    ]
